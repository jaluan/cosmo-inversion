function MDML2_elevation_fig()
% This function plots results for all samples from Jutulstraumen sorted 
% by elevation

% Written by David L. Egholm, Aarhus University
% Modified by Jane Lund Andersen to include additional options for plotting
% (violin, colorbar, transect, smooth histogram), and tailored to
% Jutulstraumen sample-set.

close all;
set(gcf,'units','centimeters','position',[10,5,20,25]);
set(gcf,'paperunits','centimeters','paperposition',[1,5,20,25]);
set(gca,'position',[0,0,1,1],'visible','off');
set(gca,'xlim',[0,1],'ylim',[0,1]);
% ax0 = gca;

%% figure settings
set(groot','defaulttextinterpreter','latex');
set(groot, 'defaultAxesTickLabelInterpreter','latex'); 
set(groot, 'defaultLegendInterpreter','latex');

map = colormap;
map(1,:) = [1,1,1];
colormap(map);

xpval = [0,50,100];
rpval = [1,0.5,1];
gpval = [1,0.5,1];
bpval = [1,1,0];

ixpval = linspace(0,100,256);
irpval = interp1(xpval,rpval,ixpval);
igpval = interp1(xpval,gpval,ixpval);
ibpval = interp1(xpval,bpval,ixpval);

map = [irpval(:),igpval(:),ibpval(:)];
colormap(map);
pops = 6; %1: b&w; 2: kernel; 3: violin (kernel); 4: colorbar; 5: transect; 6: smooth histogram
inVio=1; %1: inner violin
cmax = 50; %max value of colorbar (%)
Nhist = 20; %number of cells in color histogram 
Nkernel = 500; %number of points in kernel
kmax = 0.1; %max value of kernel function
% cbars = 0;

if pops == 5
    Maxz = 20;
    Maxt = 3*1e3;
    Nz = 201;
    Nt = 301;
    zint = linspace(0,Maxz,Nz);
    tint = linspace(0,Maxt,Nt);
    [tbin,zbin]=meshgrid(tint,zint);
end 

%% load compiled results
% -- generated by compile_results_mn5.m
load models/MDML/compiled_results_MDML2_zachos_acc.mat sample

%number of samples
Ns = 25;%length(sample); %number of models

%times for measuring erosion
TE1 = sample{1}.TE1; %TE2 = sample{1}.TE2; TE3 = sample{1}.TE3; TE4 = sample{1}.TE4;

%depth for recording times
ZT1 = sample{1}.ZT1; %ZT2 = sample{1}.ZT2; % ZT3 = sample{1}.ZT3;

%% sort after elevation
%define colors
elev = zeros(Ns,1);
% col = zeros(Ns,3);
for i=1:Ns
    elev(i) = sample{i}.elev;
end
% [eles,Is] = sort(elev,'descend');
load colormaps.mat

% Define order of samples
Is = [10 10 11 11 20 4 19 3 21 5 22 6 8 8 23 7 12 12 14 14 13 13 18 2 17 1 9 9]; %ordered after elevation above sea level and # nuclides, repeated if only BeAl
Is1 = [10 11 20 19 21 22 8 23 12 14 13 18 17 9]; %BeAl ID's ordered after elevation above sea level
Is2 = [10 11 4 3 5 6 8 7 12 14 13 2 1 9]; %BeAlCl/BeAlClNe ID's ordered after elevation above sea level, BeAl repeated if only BeAl

eles = elev(Is1);

Ns=14; %Number of unique samples

for i=1:Ns
    tempSt=char(sample{Is1(i)}.name);
    SampleIDs{i}=tempSt(1:end-5);
end

xp = 1:Ns;
zp = eles;

xpi = linspace(xp(1),xp(end),200);
zpi = interp1(xp,zp,xpi,'nearest');

dx = 0.5;
% pcol1 = [.7,.7,.9];
% pcol2 = [.9,.7,.7];
pcol3 = [.95,.95,1];
% prt = [2.5,25,50,75,97.5]; %percentile values

%% ******* figures *************

xd = 0.025;
xp = (1-7*xd)/4;

ax1=axes('position',[.1,6*xd+3*xp,.80,xp]);%ax1=axes('position',[.1,6*xd+4*xp,.80,xp]);
hold on; box on;
set(gca,'layer','top');
set(gca,'xtick',1:length(Is1),'xticklabel',[],'xlim',[0,(Ns+1)]);
set(gca,'ytick',0:1000:3000,'yticklabel',0:1:3,'ylim',[0,3000]); %elev above sea
ylh = ylabel('Elevation (km a.s.l.)');
ylh.Position(1) = -0.65;
set(gca,'fontsize',12);
%xlabel('Sample #');

ax2=axes('position',[.1,5*xd+2*xp,.80,xp]);
hold on; box on; %grid on
set(gca,'xlim',[0,(Ns+1)],'ylim',[0 100]);
%set(gca,'xlim',[0,(Ns+1)],'ylim',[1e0,1e3],'yscale','log');
set(gca,'xtick',1:length(Is1),'xticklabel',[]);
set(gca,'fontsize',12,'layer','top');
ylh = ylabel('Ice burial since 1 Ma ($\%$)','Interpreter','latex'); %$\permil$ not working
ylh.Position(1) = -0.65;
% text(-0.85,4.67,'0','rotation',90,'fontsize',7); %permil fix, not perfect
if pops == 4
    caxis([0,cmax]);
    cb1 = colorbar;
    set(cb1,'position',[0.91,5*xd+3*xp,0.025,xp]);
    ylabel(cb1,'P (%)');
end

ax3=axes('position',[.1,4*xd+1*xp,.80,xp]);
hold on; box on;
set(gca,'xlim',[0,(Ns+1)],'ylim',[0,15]);
%set(gca,'xlim',[0,(Ns+1)],'ylim',[1e3,3e6],'yscale','log');
set(gca,'xtick',1:length(Is1),'xticklabel',[]);
set(gca,'ytick',0:5:15);
set(gca,'fontsize',12,'layer','top');
line([0,(Ns+1)],[2.588 2.588],'LineStyle','--','Color',0.5*[1 1 1],'LineWidth',.75) %Quaternary
line([0,(Ns+1)],[5.333 5.333],'LineStyle','--','Color',0.5*[1 1 1],'LineWidth',.75) %Pliocene
ylh = ylabel(['Time of ' num2str(ZT1) ' m erosion (Ma)']);
ylh.Position(1) = -0.65;
if pops == 4
    caxis([0,cmax]);
    cb2 = colorbar;
    set(cb2,'position',[0.91,4*xd+2*xp,0.025,xp]);
    ylabel(cb2,'P (%)');
end

ax4=axes('position',[.1,3*xd+0*xp,.80,xp]);
hold on; box on;
set(gca,'xlim',[0,(Ns+1)],'ylim',[0,2]);
set(gca,'ytick',0:.5:20);
set(gca,'xtick',1:length(Is1),'xticklabel',SampleIDs); xtickangle(25);
set(gca,'fontsize',12,'layer','top');
%xlabel('Sample #');
ylh = ylabel(['Erosion since ' num2str(TE1) ' Ma (m)'],'FontSize',13.2);
ylh.Position(1) = -0.65;
if pops == 4
    caxis([0,cmax]);
    cb3 = colorbar;
    set(cb3,'position',[0.91,3*xd+xp,0.025,xp]);
    ylabel(cb3,'P (%)');
end

axes(ax1);
patch([xpi(:);flipud(xpi(:))],[zpi(:);zeros(size(zpi(:)))],pcol3,'linestyle','none');
line(xpi,zpi,'color','k');


%loop samples
for i=1:Ns
    
    %sample number
    snr = Is1(i);
    snr2 = Is2(i); % sample with additional nuclide
    
    axes(ax1);
    plot(i,sample{snr}.elev,'ok','markerfacecolor',.5*[1 1 1]);
    %line([i,i],[sample{snr}.elevation,0],'linewidth',.1,'color','k');

    axes(ax2);
    if pops == 1, myboxwhisker(i,dx,sample{snr}.d18Oprc,col1);
    elseif pops == 2, mykernel(i,2*dx,3,5,Nkernel,0.04,sample{snr}.d18O,col1);
    elseif pops == 3, myhalfviolin(i,dx,3,5,Nkernel,sample{snr}.d18O,col1,1); %myviolin(i,2*dx,3,5,Nkernel,0.04,sample{snr}.d18O,col(snr,:));
        if inVio==1 && ~(snr==snr2) && ~ismember(snr2,[4,3,5,6,7,2,1])
            myhalfviolin(i,dx,3,5,Nkernel,sample{snr2}.d18O,col2,2); 
        elseif inVio==1 && ~(snr==snr2) && ismember(snr2,[4,3,5,6,7,2,1])
            myhalfviolin(i,dx,3,5,Nkernel,sample{snr2}.d18O,col3,2);
            if ismember(snr2,[2,1])
                myhalfviolin(i,dx,3,5,Nkernel,sample{snr2-14}.d18O,col2,2);
            end
        end
    elseif pops == 6
        myhalfhist(i,dx,0,100,Nkernel/5,sample{snr}.b1My,col1a,1); Nacc=length(sample{snr}.b1My);
        myhalfhist(i,dx*length(sample{snr}.b1My(sample{snr}.residual<4))/Nacc,0,100,Nkernel/5,sample{snr}.b1My(sample{snr}.residual<4),col1b,1);
        myhalfhist(i,dx*length(sample{snr}.b1My(sample{snr}.residual<1))/Nacc,0,100,Nkernel/5,sample{snr}.b1My(sample{snr}.residual<1),col1c,1);
        if inVio==1 && ~(snr==snr2) && ~ismember(snr2,[4,3,5,6,7,2,1])
            myhalfhist(i,dx,0,100,Nkernel/5,sample{snr2}.b1My,col2a,2); Nacc=length(sample{snr2}.b1My); %Be-Al-Ne
            myhalfhist(i,dx*length(sample{snr2}.b1My(sample{snr2}.residual<4))/Nacc,0,100,Nkernel/5,sample{snr2}.b1My(sample{snr2}.residual<4),col2b,2); %Be-Al-Ne
            myhalfhist(i,dx*length(sample{snr2}.b1My(sample{snr2}.residual<1))/Nacc,0,100,Nkernel/5,sample{snr2}.b1My(sample{snr2}.residual<1),col2c,2); %Be-Al-Ne
        elseif inVio==1 && ~(snr==snr2) && ismember(snr2,[4,3,5,6,7,2,1])
            myhalfhist(i,dx,0,100,Nkernel/5,sample{snr2}.b1My,col3a,2); Nacc=length(sample{snr2}.b1My); % Be-Al-Cl
            myhalfhist(i,dx*length(sample{snr2}.b1My(sample{snr2}.residual<4))/Nacc,0,100,Nkernel/5,sample{snr2}.b1My(sample{snr2}.residual<4),col3b,2); % Be-Al-Cl
            myhalfhist(i,dx*length(sample{snr2}.b1My(sample{snr2}.residual<1))/Nacc,0,100,Nkernel/5,sample{snr2}.b1My(sample{snr2}.residual<1),col3c,2); % Be-Al-Cl
            if ismember(snr2,[2,1])
                myhalfhist(i,dx,0,100,Nkernel/5,sample{snr2}.b1My,col4a,2); Nacc=length(sample{snr2}.b1My); % Be-Al-Cl-Ne
                myhalfhist(i,dx*length(sample{snr2}.b1My(sample{snr2}.residual<4))/Nacc,0,100,Nkernel/5,sample{snr2}.b1My(sample{snr2}.residual<4),col4b,2); % Be-Al-Cl-Ne
                myhalfhist(i,dx*length(sample{snr2}.b1My(sample{snr2}.residual<1))/Nacc,0,100,Nkernel/5,sample{snr2}.b1My(sample{snr2}.residual<1),col4c,2); % Be-Al-Cl-Ne
            end
        end
    else, mycbar(i,dx,8,16,Nhist,sample{snr}.d18O);
    end

    axes(ax3);
    if pops == 1,  myboxwhisker(i,dx,sample{snr}.TZ1prc,col1);
    elseif pops == 2, mykernel(i,2*dx,0,5,Nkernel,kmax,sample{snr}.TZ1,col1);
    elseif pops == 3, myhalfviolin(i,dx,0,max(sample{snr}.TZ1),Nkernel,sample{snr}.TZ1,col1,1); %myviolin(i,2*dx,0,max(sample{snr}.TZ1),Nkernel,kmax,sample{snr}.TZ1,col(snr,:));
        if inVio==1 && ~(snr==snr2) && ~ismember(snr2,[4,3,5,6,7,2,1]) 
            myhalfviolin(i,dx,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1,col2,2); 
        elseif inVio==1 && ~(snr==snr2) && ismember(snr2,[4,3,5,6,7,2,1])
            myhalfviolin(i,dx,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1,col3,2);
            if ismember(snr2,[2,1])
                myhalfviolin(i,dx,0,max(sample{snr2-14}.TZ1),Nkernel,sample{snr2-14}.TZ1,col2,2);
            end
        end %'w'
                   %   plot(i,sample{snr}.TZ1prc(3),'+','Color',pcol3);
    elseif pops == 5, load(['../models/sGreenland/transects/sample_' num2str(snr) '_.mat'],'T2_6')
                      mytransect(i,dx,tbin(1,:)/1000,T2_6,col(snr,:)+[0 0 .3]);
                      if inVio==1, T2_6(T2_6<0.01)=0; mytransect(i,dx,tbin(1,:)/1000,T2_6,col1); end
    elseif pops == 6
        myhalfhist(i,dx,0,max(sample{snr}.TZ1),Nkernel,sample{snr}.TZ1,col1a,1); Nacc=length(sample{snr}.TZ1);
        myhalfhist(i,dx*length(sample{snr}.TZ1(sample{snr}.residual<4))/Nacc,0,max(sample{snr}.TZ1),Nkernel,sample{snr}.TZ1(sample{snr}.residual<4),col1b,1);
        myhalfhist(i,dx*length(sample{snr}.TZ1(sample{snr}.residual<1))/Nacc,0,max(sample{snr}.TZ1),Nkernel,sample{snr}.TZ1(sample{snr}.residual<1),col1c,1);
        if inVio==1 && ~(snr==snr2) && ~ismember(snr2,[4,3,5,6,7,2,1])
            myhalfhist(i,dx,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1,col2a,2); Nacc=length(sample{snr2}.TZ1); %Be-Al-Ne
            myhalfhist(i,dx*length(sample{snr2}.TZ1(sample{snr2}.residual<4))/Nacc,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1(sample{snr2}.residual<4),col2b,2); %Be-Al-Ne
            myhalfhist(i,dx*length(sample{snr2}.TZ1(sample{snr2}.residual<1))/Nacc,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1(sample{snr2}.residual<1),col2c,2); %Be-Al-Ne
        elseif inVio==1 && ~(snr==snr2) && ismember(snr2,[4,3,5,6,7,2,1])
            myhalfhist(i,dx,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1,col3a,2); Nacc=length(sample{snr2}.TZ1); % Be-Al-Cl
            myhalfhist(i,dx*length(sample{snr2}.TZ1(sample{snr2}.residual<4))/Nacc,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1(sample{snr2}.residual<4),col3b,2); % Be-Al-Cl
            myhalfhist(i,dx*length(sample{snr2}.TZ1(sample{snr2}.residual<1))/Nacc,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1(sample{snr2}.residual<1),col3c,2); % Be-Al-Cl
            if ismember(snr2,[2,1])
                myhalfhist(i,dx,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1,col4a,2); Nacc=length(sample{snr2}.TZ1); % Be-Al-Cl-Ne
                myhalfhist(i,dx*length(sample{snr2}.TZ1(sample{snr2}.residual<4))/Nacc,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1(sample{snr2}.residual<4),col4b,2); % Be-Al-Cl-Ne
                myhalfhist(i,dx*length(sample{snr2}.TZ1(sample{snr2}.residual<1))/Nacc,0,max(sample{snr2}.TZ1),Nkernel,sample{snr2}.TZ1(sample{snr2}.residual<1),col4c,2); % Be-Al-Cl-Ne
            end
        end
    else, mycbar(i,dx,0,3,Nhist,sample{snr}.TZ1);
    end
    
    axes(ax4);
    if pops == 1,  myboxwhisker(i,dx,sample{snr}.E1prc,col1);
    elseif pops == 2, mykernel(i,2*dx,0,5,Nkernel,kmax,sample{snr}.E1,col1);
    elseif pops == 3, myhalfviolin(i,dx,0,5,Nkernel,sample{snr}.E1,col1,1); %myviolin(i,2*dx,0,max(sample{snr}.E1),Nkernel,kmax,sample{snr}.E1,col(snr,:));
        if inVio==1 && ~(snr==snr2) && ~ismember(snr2,[4,3,5,6,7,2,1])
            myhalfviolin(i,dx,0,20,Nkernel,sample{snr2}.E1,col2,2); 
        elseif inVio==1 && ~(snr==snr2) && ismember(snr2,[4,3,5,6,7,2,1])
            myhalfviolin(i,dx,0,20,Nkernel,sample{snr2}.E1,col3,2);
            if ismember(snr2,[2,1])
                myhalfviolin(i,dx,0,20,Nkernel,sample{snr2-14}.E1,col2,2);
            end
        end %'w'
                   %   plot(i,sample{snr}.E2prc(3),'+','Color',pcol3);
    elseif pops == 5, load(['../models/sGreenland/transects/sample_' num2str(snr) '_.mat'],'Z1')
                      mytransect(i,dx,zbin(:,1),Z1,col(snr,:)+[0 0 .3]);
                      if inVio==1, Z1(Z1<0.01)=0; mytransect(i,dx,zbin(:,1),Z1,col1);end
    elseif pops == 6
        myhalfhist(i,dx,0,5,Nkernel,sample{snr}.E1,col1a,1); Nacc=length(sample{snr}.E1);
        myhalfhist(i,dx*length(sample{snr}.E1(sample{snr}.residual<4))/Nacc,0,5,Nkernel,sample{snr}.E1(sample{snr}.residual<4),col1b,1);
        myhalfhist(i,dx*length(sample{snr}.E1(sample{snr}.residual<1))/Nacc,0,5,Nkernel,sample{snr}.E1(sample{snr}.residual<1),col1c,1);
        if inVio==1 && ~(snr==snr2) && ~ismember(snr2,[4,3,5,6,7,2,1])
            myhalfhist(i,dx,0,5,Nkernel,sample{snr2}.E1,col2a,2); Nacc=length(sample{snr2}.E1);%Be-Al-Ne
            myhalfhist(i,dx*length(sample{snr2}.E1(sample{snr2}.residual<4))/Nacc,0,5,Nkernel,sample{snr2}.E1(sample{snr2}.residual<4),col2b,2); %Be-Al-Ne
            myhalfhist(i,dx*length(sample{snr2}.E1(sample{snr2}.residual<1))/Nacc,0,5,Nkernel,sample{snr2}.E1(sample{snr2}.residual<1),col2c,2); %Be-Al-Ne
        elseif inVio==1 && ~(snr==snr2) && ismember(snr2,[4,3,5,6,7,2,1])
            myhalfhist(i,dx,0,5,Nkernel,sample{snr2}.E1,col3a,2); Nacc=length(sample{snr2}.E1);% Be-Al-Cl
            myhalfhist(i,dx*length(sample{snr2}.E1(sample{snr2}.residual<4))/Nacc,0,5,Nkernel,sample{snr2}.E1(sample{snr2}.residual<4),col3b,2); % Be-Al-Cl
            myhalfhist(i,dx*length(sample{snr2}.E1(sample{snr2}.residual<1))/Nacc,0,5,Nkernel,sample{snr2}.E1(sample{snr2}.residual<1),col3c,2); % Be-Al-Cl
            if ismember(snr2,[2,1])
                myhalfhist(i,dx,0,5,Nkernel,sample{snr2}.E1,col4a,2); Nacc=length(sample{snr2}.E1);% Be-Al-Cl-Ne
                myhalfhist(i,dx*length(sample{snr2}.E1(sample{snr2}.residual<4))/Nacc,0,5,Nkernel,sample{snr2}.E1(sample{snr2}.residual<4),col4b,2); % Be-Al-Cl-Ne
                myhalfhist(i,dx*length(sample{snr2}.E1(sample{snr2}.residual<1))/Nacc,0,5,Nkernel,sample{snr2}.E1(sample{snr2}.residual<1),col4c,2); % Be-Al-Cl-Ne
            end
        end
    else, mycbar(i,dx,0,20,Nhist,sample{snr}.E1);
    end
    
end

set(groot','defaulttextinterpreter','default');
set(groot, 'defaultAxesTickLabelInterpreter','default'); 
set(groot, 'defaultLegendInterpreter','default');